[{"content":"Recently I reread “Zero to One” by Peter Thiel. Peter Thiel is a founder of PayPal and Palantir and he is also a venture capitalist. He is called Don of the PayPal mafia. It’s called PayPal mafia because initial members of the team later created many famous companies like Tesla, SpaceX, youtube, yammer, yelp so on. This book is written by collecting notes from one of his students while he was giving a lecture at Stand Ford. As the name itself suggests it talks about building successful startups from nothing rather than building from known steps and replicating it.\nI specifically want to talk about three points that this book talks about building a successful startup.\nThe first point is building a monopoly business. The author says the business to be successful it should build a monopoly business. Monopoly means having complete control over the market of a particular business. To explain this let us take the example of Google. When Google was founded there were many other search engines like Yahoo. But Google built a better algorithm that gives very relevant search results which are so famous that Google is added as a new word in the Oxford dictionary which means search. By building better products google built a monopoly because of which it can define the price of ads it runs and since there is no other competitor it will make lots of profit from it. But when you become a monopoly you attract the attention of the government which does not want one company to have a monopoly so such companies build subsidiaries where they don’t dominate.\nThe second point the book talks about is building a unique product. It is very obvious when the product is too good it does not need advertisement. Recent examples of this are companies like Tesla in cars, Zerodha in India in the share market, and recently ChatGPT. If you take any of these examples, they are unique and they add value to your life they need not be advertised and growth happens organically. The author gave the example of Facebook, before Facebook, there were many social networks but they did not get success because they were unique. They used to open and anyone can come and put a comment on your timeline and people were not ready for it. But Facebook provided friend requests using which you can control who can connect with you and people used that to connect with people they knew.\nThe third point is building a great team and company culture. For this author gives the example of PayPal. Initially, the company was not PayPal. It was called Confinity and during the dot com bubble in 2000s confinity and x.com from Elon got merged to become PayPal and build a strong team because of which they were able to navigate through the dot com bubble. They showed immense fortitude through that market crash. This was possible because of the strong team which believed in great products rather than the outside noise. In the end, they sold the company to eBay many members of the original group became millionaires, and because of this, they were able to create companies that have an immense impact on our world today.\nIn conclusion, the book provides a first-hand perspective of building a startup from scratch and gives examples and also warns to build the next successful startup we should not follow what is already done rather we should build it from 0 to 1.\n","permalink":"http://prajwals.in/posts/zero-to-one/","summary":"Recently I reread “Zero to One” by Peter Thiel. Peter Thiel is a founder of PayPal and Palantir and he is also a venture capitalist. He is called Don of the PayPal mafia. It’s called PayPal mafia because initial members of the team later created many famous companies like Tesla, SpaceX, youtube, yammer, yelp so on. This book is written by collecting notes from one of his students while he was giving a lecture at Stand Ford.","title":"Zero to One"},{"content":"Celery is a task queue. It allows us to run tasks asynchronously from Python web applications outside the HTTP request-response cycle. That means if there is a task that will take some time to complete and you don’t want to wait until the completion of the task to respond to the client then we can run such tasks asynchronously by running in the background using celery.\nThis involves two main components celery and a message broker:\nProducer: In our case, the Django application is the producer. Whenever the Django application calls a task with a delay, the task will be picked up by the celery client and added to the queue using a message broker and gives an instant response with details related to the task.\nMessage broker: A message broker is the one that stores tasks in a queue and delivers them to the consumer in our case celery worker (Ex: RabbitMQ, Redis). The overall task of the message broker in our case is picking an async task from multiple places and storing it in a queue and delivering it to the celery worker for its execution.\nConsumer: In our scenario consumer is a celery worker. Celery worker is a service that picks up tasks from the message broker queue and executes them independently. We can create single or multiple celery workers as per our requirement by passing options in command while creating the serving.\nNow there can be two kinds of async tasks one which gets triggered while the user makes a request from the application and another is triggered periodically(Just like cron jobs). This is achieved using celery beat.\nCelery workers are worker processes that run tasks independently from one another and outside the context of your main service. Celery beat is a scheduler that orchestrates when to run tasks. You can use it to schedule periodic tasks as well.\nIntegrating Celery with Django and RabbitMQ: Install celery: Add the celery and django_celery_results module to INSTALLED_APPS in your Django project’ settings.py: Apply Django database migrations so that the necessary tables are created: Install RabbitMQ message broker (Alternatively Redis can be used):https://www.rabbitmq.com/download.html\nThen create an instance of Celery:\nCreate a task with @shared_task decorator: Tasks created with shared_task decorator is auto detected by celery. Starting the Celery worker service:\n\u0026ndash;pool option used to control the number of concurrencies https://www.distributedpython.com/2018/10/26/celery-execution-pool/\nInstall all necessary packages by running the following commands. sudo apt-get install wget apt-transport-https -y Install RabbitMQ repository signing key. wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add - Add the RabbitMQ repository. echo \u0026ldquo;deb https://dl.bintray.com/rabbitmq-erlang/debian focal erlang-22.x\u0026rdquo; | sudo tee/etc/apt/sources.list.d/rabbitmq.list Install RabbitMQ Server. sudo apt-get install rabbitmq-server -y \u0026ndash;fix-missing heck status of the RabbitMQ service. sudo systemctl status rabbitmq-server Enable rabbitmq management dashboard. (available at : http://server_ip:15672) sudo rabbitmq-plugins enable rabbitmq_management Create RabbitMq user with sudo rabbitmqctl add_user \u0026lt;user_name\u0026gt; Give administrative access to the new user: rabbitmqctl set_user_tags \u0026lt;user_name\u0026gt; administrator Set permission to newly created user: rabbitmqctl set_permissions -p / \u0026lt;user_name\u0026gt; \u0026ldquo;.\u0026rdquo; \u0026ldquo;.\u0026rdquo; \u0026ldquo;.*\u0026rdquo; For celery beat: celery beat is a scheduler; It kicks off tasks at regular intervals, that are then executed by available worker nodes in the cluster. For obvious reasons, only one celery beat process should be running (unlike workers, where you can run as many as you want and need).\nUse pip to install the package: pip install django-celery-beat Add the django_celery_beat module to INSTALLED_APPS in your Django project’ settings.py: Apply Django database migrations so that the necessary tables are created:\nThere are two ways to run periodic tasks in celery Using periodic schedule setup done in settings: For example\nTo run the celery beat service for scheduled tasks from settings:\nUsing periodic setup done in the database:\nConfigurations :\nThere are multiple configurations availble https://docs.celeryq.dev/en/stable/userguide/configuration.html , Only important are mentioned here:\nFor configuring message broker: CELERY_BROKER_URL: \u0026lsquo;amqp://guest:guest@localhost:5672//\u0026rsquo;(for RabbitMQ) For configuring backed result DB: CELERY_RESULT_BACKEND: \u0026lsquo;django-db\u0026rsquo; (For django db) For configuring time zone: Make sure the Django timezone and celery beat timezone are the same otherwise celery beat will not work as expected.CELERY_TIMEZONE: \u0026lsquo;Asia/Kolkata\u0026rsquo; A few things to keep in mind while working with an async task queue: Don\u0026rsquo;t pass model objects to tasks. Since tasks don\u0026rsquo;t run immediately, by the time a task runs and looks at a model object that was passed to it, the corresponding record in the database might have changed. If the task then does something to the model object and saves it, those changes in the database are overwritten by older data.\nIt\u0026rsquo;s almost always safer to save the object, pass the record\u0026rsquo;s key, and look up the object again in the task:\nmyobject.save() mytask.delay(myobject.pk)\n\u0026hellip;\n@task def mytask(pk): myobject = MyModel.objects.get(pk=pk) Resources:\nhttps://docs.celeryq.dev/en/stable/getting-started/introduction.html\nhttps://www.rabbitmq.com/documentation.html\nFor extra reading and troubleshooting:\nhttps://docs.celeryq.dev/en/stable/userguide/periodic-tasks.html\nhttps://django-celery-beat.readthedocs.io/en/latest/\nhttps://www.distributedpython.com/2018/10/26/celery-execution-pool/\nhttps://www.distributedpython.com/2018/11/15/celery-docker/\nhttps://www.distributedpython.com/\nhttps://github.com/czue/celery-progress\nhttps://www.vinta.com.br/blog/2017/celery-overview-archtecture-and-how-it-works/\nhttps://www.caktusgroup.com/blog/2021/08/11/using-celery-scheduling-tasks/\nhttps://www.caktusgroup.com/blog/2014/09/29/celery-production/\nhttps://pypi.org/project/flower/\nhttps://github.com/celery/django-celery-beat/issues/95\nhttps://pypi.org/project/django-celery-beat/\nhttps://www.distributedpython.com/\nhttps://realpython.com/asynchronous-tasks-with-django-and-celery/#:~:text=Celery%20workers%20are%20worker%20processes,schedule%20periodic%20tasks%20as%20well.\nhttps://pypi.org/project/django-celery-model/\nhttps://github.com/celery/django-celery-beat/issues/95 https://stackoverflow.com/questions/10194975/how-to-dynamically-add-remove-periodic-tasks-to-celery-celerybeat\ncelery -A app_name beat -l INFO CELERY_BEAT_SCHEDULE = { \u0026ldquo;scheduled_task\u0026rdquo;: { \u0026ldquo;task\u0026rdquo;: \u0026ldquo;performance_review.tasks.scheduled.scheduled_task.scheduled_task\u0026rdquo;, \u0026ldquo;schedule\u0026rdquo;: 5.0, \u0026ldquo;args\u0026rdquo;: (),\n}, } python manage.py migrate INSTALLED_APPS = ( \u0026hellip;, \u0026lsquo;django_celery_beat\u0026rsquo;, ) celery -A app_name worker -l info \u0026ndash;pool=solo from celery import Celery\napp_name = Celery(\u0026rsquo;\u0026rsquo;, broker=\u0026lt;\u0026lsquo;specify message broker url\u0026rsquo;\u0026gt;) celery_app.autodiscover_tasks() python manage.py migrate INSTALLED_APPS = ( \u0026hellip;, \u0026lsquo;celery\u0026rsquo;, \u0026lsquo;django_celery_results\u0026rsquo; ) pip install celery\n","permalink":"http://prajwals.in/posts/celery/","summary":"Celery is a task queue. It allows us to run tasks asynchronously from Python web applications outside the HTTP request-response cycle. That means if there is a task that will take some time to complete and you don’t want to wait until the completion of the task to respond to the client then we can run such tasks asynchronously by running in the background using celery.\nThis involves two main components celery and a message broker:","title":"Celery"},{"content":"What is a REST API? A REST API (also known as RESTful API) is an application programming interface (API or web API) that conforms to the constraints of REST architectural style and allows for interaction with RESTful web services. REST stands for representational state transfer and was created by computer scientist Roy Fielding.\nA Restful system consists of a:\nA client who requests the resources. The server that has the resources Architectural Constraints of RESTful API: There are six architectural constraints that make any web service are listed below:\nUniform Interface Stateless Cacheable Client-Server Layered System Code on Demand. Resources:\nhttps://www.redhat.com/en/topics/api/what-is-a-rest-api\nhttps://www.geeksforgeeks.org/rest-api-architectural-constraints/\nBest practices for REST API design? Rest API must accept and respond with JSON: REST APIs should accept JSON for request payload and also send responses to JSON. JSON is the standard for transferring data. Almost every networked technology can use it: JavaScript has built-in methods to encode and decode JSON either through the Fetch API or another HTTP client. Server-side technologies have libraries that can decode JSON without doing much work. Use nouns instead of verbs in endpoint paths: We shouldn’t use verbs in our endpoint paths. Instead, we should use the nouns which represent the entity that the endpoint that we’re retrieving or manipulating as the pathname. Name collections with plural nouns: When you have to develop the collection in REST API, just go with plural nouns. It makes it easier to understand the meaning of the collection without actually opening it. Example: GET /cars/123 Nesting resources for hierarchical objects: When designing endpoints, it makes sense to group those that contain associated information. That is, if one object can contain another object, you should design the endpoint to reflect that. This is good practice regardless of whether your data is structured like this in your database. Example: GET /employees/1/leave Handle errors gracefully and return standard error codes: To eliminate confusion for API users when an error occurs, we should handle errors gracefully and return HTTP response codes that indicate what kind of error occurred. This gives maintainers of the API enough information to understand the problem that’s occurred. We don’t want errors to bring down our system, so we can leave them unhandled, which means that the API consumer has to handle them. Allow filtering, sorting, and pagination: The databases behind a REST API can get very large. Sometimes, there’s so much data that it shouldn’t be returned all at once because it’s way too slow or will bring down our systems. Therefore, we need ways to filter items. Maintain good security practices: Using SSL/TLS for security is a must. People shouldn’t be able to access more information than they requested. If we choose to group users into a few roles, then the roles should have the permissions that cover all they need and no more. Cache data to improve performance: We can add caching to return data from the local memory cache instead of querying the database to get the data every time we want to retrieve some data that users request. Versioning our APIs: We should have different versions of API if we’re making any changes to them that may break clients. API documentation: When you make a REST API, you need to help clients (consumers) learn and figure out how to use it correctly. The best way to do this is by providing good documentation for the API. The documentation should contain: relevant endpoints of the API example requests of the endpoints implementation in several programming languages messages listed for different errors with their status codes https://swagger.io/ Example:\nResource\nPOST\nGET\nPUT\nDELETE\n/employees\nCreate a new employee(s)\nRetrieve all employees\nBulk update of employees\nRemove all employees\n/employees/1\nError\nRetrieve the details for employee 1\nUpdate the details of employee 1 if it exists\nRemove employee 1\n/employees/1/leave\nCreate a new leave request for employee 1\nRetrieve all leaves for employee 1\nBulk update of leaves for employee 1\nRemove all leaves for employee 1\nResources:\nhttps://learn.microsoft.com/en-us/azure/architecture/best-practices/api-design\nhttps://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/\nhttps://stackoverflow.blog/2021/10/06/best-practices-for-authentication-and-authorization-for-rest-apis/\nhttps://www.freecodecamp.org/news/rest-api-best-practices-rest-endpoint-design-examples/\nhttps://swagger.io/resources/articles/best-practices-in-api-design/\nhttps://www.redhat.com/en/topics/api/what-is-a-rest-api\nhttps://restfulapi.net/\nhttps://www.partech.nl/nl/publicaties/2020/07/9-trending-best-practices-for-rest-api-development#\nREST API Design: Filter, Sort, and pagination https://www.moesif.com/blog/technical/api-design/REST-API-Design-Filtering-Sorting-and-Pagination/\n","permalink":"http://prajwals.in/posts/rest-api/","summary":"What is a REST API? A REST API (also known as RESTful API) is an application programming interface (API or web API) that conforms to the constraints of REST architectural style and allows for interaction with RESTful web services. REST stands for representational state transfer and was created by computer scientist Roy Fielding.\nA Restful system consists of a:\nA client who requests the resources. The server that has the resources Architectural Constraints of RESTful API: There are six architectural constraints that make any web service are listed below:","title":"Best practices for REST API design"},{"content":"Welcome to my space! I am Prajwal S, engineer, software developer. Hopefully, I\u0026rsquo;ll tell you more about myself someday. You can find me on:\nGitHub X(Twitter) LinkedIn Facebook Instagram Instagram - photonstruck [Email](mailto:prajwalsandinje at gmail dot com) ","permalink":"http://prajwals.in/about/","summary":"Welcome to my space! I am Prajwal S, engineer, software developer. Hopefully, I\u0026rsquo;ll tell you more about myself someday. You can find me on:\nGitHub X(Twitter) LinkedIn Facebook Instagram Instagram - photonstruck [Email](mailto:prajwalsandinje at gmail dot com) ","title":"About"},{"content":"Updating\u0026hellip;.\nOriginally posted around 2021 july\n","permalink":"http://prajwals.in/posts/init/","summary":"Updating\u0026hellip;.\nOriginally posted around 2021 july","title":"Init"}]