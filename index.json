[{"content":"Recently, I reread Zero to One by Peter Thiel and wanted to note down a few key takeaways for future reference.\n1. Building a Monopoly Business: Thiel emphasizes that for a business to succeed, it should aim to build a monopoly. A monopoly means having complete control over a particular market. To illustrate this, let\u0026rsquo;s consider Google. When Google was founded, there were many other search engines like Yahoo. However, Google developed a superior algorithm that delivered highly relevant search results, making it so popular that \u0026ldquo;Google\u0026rdquo; is now a verb in the Oxford Dictionary, meaning \u0026ldquo;to search.\u0026rdquo; By creating a better product, Google established a monopoly, enabling it to set the prices for the ads it runs. With little competition, Google can generate significant profits. However, becoming a monopoly often attracts government attention, as authorities do not want a single company to dominate an industry. To avoid this, such companies often create subsidiaries where they do not dominate the market.\n2. Building a Unique Product: Another key idea in the book is creating a unique product. When a product is exceptional, it doesn\u0026rsquo;t require much advertising. Recent examples of this are companies like Tesla in the automotive industry, Zerodha in the Indian stock market, and ChatGPT in AI. These products are unique and add value to people\u0026rsquo;s lives, so they grow organically without heavy advertising. Thiel uses Facebook as an example: before Facebook, several social networks existed, but they lacked the uniqueness that led to widespread success. Those earlier networks allowed anyone to leave comments, which many users found intrusive. Facebook, however, introduced friend requests, giving users control over who could connect with them. This innovation was key to its rapid growth and adoption.\n3. Building a Great Team and Company Culture: Thiel also stresses the importance of building a strong team and company culture. He gives the example of PayPal. Initially, PayPal was known as Confinity, but during the dot-com bubble in the early 2000s, Confinity merged with X.com, Elon Musk\u0026rsquo;s company, to form PayPal. This merger created a strong, resilient team that helped the company navigate the dot-com crash. Their success was due to their focus on building great products and ignoring external noise. Eventually, they sold PayPal to eBay, and many of the original team members became millionaires. This success allowed them to go on and create other companies that have had a profound impact on the world today.\n","permalink":"http://localhost:1313/posts/zero-to-one/","summary":"Recently, I reread Zero to One by Peter Thiel and wanted to note down a few key takeaways for future reference.\n1. Building a Monopoly Business: Thiel emphasizes that for a business to succeed, it should aim to build a monopoly. A monopoly means having complete control over a particular market. To illustrate this, let\u0026rsquo;s consider Google. When Google was founded, there were many other search engines like Yahoo. However, Google developed a superior algorithm that delivered highly relevant search results, making it so popular that \u0026ldquo;Google\u0026rdquo; is now a verb in the Oxford Dictionary, meaning \u0026ldquo;to search.","title":"Zero to One"},{"content":"What is celery?: Celery is a task queue. It allows us to run tasks asynchronously from Python web applications outside the HTTP request-response cycle. That means if there is a task that will take some time to complete and you don’t want to wait until the completion of the task to respond to the client then we can run such tasks asynchronously by running in the background using celery.\nComponents: Producer: For example, the Django application can be a producer. Whenever the Django application calls a task with a delay, the task will be picked up by the celery client and added to the queue using a message broker and gives an instant response with details related to the task.\nMessage broker: A message broker is the one that stores tasks in a queue and delivers them to the consumer i.e in our case celery worker(Ex: RabbitMQ, Redis). The overall task of the message broker in our case is picking an async task from multiple places and storing it in a queue and delivering it to the celery worker for its execution.\nConsumer: In our scenario consumer is a celery worker. Celery worker is a service that picks up tasks from the message broker queue and executes them independently. We can create single or multiple celery workers as per our requirement by passing options in command while creating the serving.\nNow there can be two kinds of async tasks one which gets triggered while the user makes a request from the application and another is triggered periodically(Just like cron jobs). This is achieved using celery beat.\nCelery workers are worker processes that run tasks independently from one another and outside the context of your main service. Celery beat is a scheduler that orchestrates when to run tasks. You can use it to schedule periodic tasks as well.\nIntegrating Celery with Django and RabbitMQ: Install celery Add the celery and django_celery_results module to INSTALLED_APPS in your Django project’ settings.py Apply Django database migrations so that the necessary tables are created Install RabbitMQ message broker (Alternatively Redis can be used):https://www.rabbitmq.com/download.html Then create an instance of Celery Create a task with @shared_task decorator Tasks created with shared_task decorator is auto detected by celery Starting the Celery worker service: \u0026ndash;pool option used to control the number of concurrencies https://www.distributedpython.com/2018/10/26/celery-execution-pool/ ** This article will be updated **\n","permalink":"http://localhost:1313/posts/celery/","summary":"What is celery?: Celery is a task queue. It allows us to run tasks asynchronously from Python web applications outside the HTTP request-response cycle. That means if there is a task that will take some time to complete and you don’t want to wait until the completion of the task to respond to the client then we can run such tasks asynchronously by running in the background using celery.\nComponents: Producer: For example, the Django application can be a producer.","title":"Celery"},{"content":"What is a REST API? A REST API (also known as RESTful API) is an application programming interface (API or web API) that conforms to the constraints of REST architectural style and allows for interaction with RESTful web services. REST stands for representational state transfer and was created by computer scientist Roy Fielding.\n** This article is getting updated **\n","permalink":"http://localhost:1313/posts/rest-api/","summary":"What is a REST API? A REST API (also known as RESTful API) is an application programming interface (API or web API) that conforms to the constraints of REST architectural style and allows for interaction with RESTful web services. REST stands for representational state transfer and was created by computer scientist Roy Fielding.\n** This article is getting updated **","title":"Best practices for REST API design"},{"content":"Welcome to my space! I\u0026rsquo;m Prajwal S. Hopefully, I\u0026rsquo;ll tell you more about myself someday. You can also find me here:\nGitHub X(Twitter) LinkedIn Facebook Instagram Instagram - photonstruck [Email](mailto:prajwalsandinje at gmail dot com) ","permalink":"http://localhost:1313/about/","summary":"Welcome to my space! I\u0026rsquo;m Prajwal S. Hopefully, I\u0026rsquo;ll tell you more about myself someday. You can also find me here:\nGitHub X(Twitter) LinkedIn Facebook Instagram Instagram - photonstruck [Email](mailto:prajwalsandinje at gmail dot com) ","title":"About"},{"content":"Updating.\n","permalink":"http://localhost:1313/posts/init/","summary":"Updating.","title":"Init"}]